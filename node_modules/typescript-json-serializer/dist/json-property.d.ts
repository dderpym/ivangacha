export declare type IOProto = (property: any, currentInstance?: any) => any;
export declare type PredicateProto = (property: any, parentProperty?: any) => any;
export interface JsonPropertyBaseMetadata {
    isDictionary?: boolean;
    required?: boolean;
    beforeSerialize?: IOProto;
    afterSerialize?: IOProto;
    beforeDeserialize?: IOProto;
    afterDeserialize?: IOProto;
}
export interface JsonPropertiesMetadata {
    [id: string]: JsonPropertyMetadata;
}
export declare type JsonPropertyMetadata = {
    isNameOverridden?: boolean;
    name: string | Array<string>;
    type?: Function;
    predicate?: PredicateProto;
} & JsonPropertyBaseMetadata;
export declare const JsonProperty: (options?: string | ({
    name?: string | string[] | undefined;
    type?: Function | PredicateProto | undefined;
} & JsonPropertyBaseMetadata) | undefined) => Function;
