import { Type } from './helpers';
import { JsonSerializerOptions } from './json-serializer-options';
declare type Nullish = null | undefined;
export declare class JsonSerializer {
    options: JsonSerializerOptions;
    constructor(options?: Partial<JsonSerializerOptions>);
    deserialize<T extends object>(value: string | object | Array<object>, type: Type<T> | T): T | Array<T | Nullish> | Nullish;
    deserializeObject<T extends object>(obj: string | object, type: Type<T> | T): T | Nullish;
    deserializeObjectArray<T extends object>(array: string | Array<any>, type: Type<T> | T): Array<T | Nullish> | Nullish;
    serialize(value: object | Array<object>): object | Array<object> | Nullish;
    serializeObject(instance: object): object | Nullish;
    serializeObjectArray(array: Array<object>): Array<object | Nullish> | Nullish;
    private deserializeProperty;
    private deserializePrimitive;
    private deserializeDictionary;
    private deserializeArray;
    private error;
    private getClassesJsonPropertiesMetadata;
    private getDataSource;
    private getJsonPropertiesMetadata;
    private isAllowedProperty;
    private mergeJsonPropertiesMetadata;
    private serializeDictionary;
    private serializeProperty;
}
export {};
